// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OrderStatus.
const (
	ORDERSTATUSCANCELLED   OrderStatus = "ORDER_STATUS_CANCELLED"
	ORDERSTATUSDELIVERED   OrderStatus = "ORDER_STATUS_DELIVERED"
	ORDERSTATUSPAID        OrderStatus = "ORDER_STATUS_PAID"
	ORDERSTATUSPENDING     OrderStatus = "ORDER_STATUS_PENDING"
	ORDERSTATUSSHIPPED     OrderStatus = "ORDER_STATUS_SHIPPED"
	ORDERSTATUSUNSPECIFIED OrderStatus = "ORDER_STATUS_UNSPECIFIED"
)

// Order defines model for Order.
type Order struct {
	// CreatedAt Timestamp when the order was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier of the order
	Id string `json:"id"`

	// Items List of items in the order
	Items []OrderItem `json:"items"`

	// Status Current status of the order
	Status OrderStatus `json:"status"`

	// TotalAmount Total amount of the order
	TotalAmount float64 `json:"total_amount"`

	// UpdatedAt Timestamp when the order was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of the user who placed the order
	UserId string `json:"user_id"`
}

// OrderItem defines model for OrderItem.
type OrderItem struct {
	// Name Name of the product
	Name string `json:"name"`

	// ProductId ID of the product
	ProductId string `json:"product_id"`

	// Quantity Quantity of the product
	Quantity int32 `json:"quantity"`

	// Subtotal Total price for this item
	Subtotal float64 `json:"subtotal"`

	// UnitPrice Price per unit
	UnitPrice float64 `json:"unit_price"`
}

// OrderStatus Current status of the order
type OrderStatus string

// ListOrdersParams defines parameters for ListOrders.
type ListOrdersParams struct {
	UserId    string  `form:"user_id" json:"user_id"`
	PageSize  *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody struct {
	Items  []OrderItem `json:"items"`
	UserId string      `json:"user_id"`
}

// UpdateOrderStatusJSONBody defines parameters for UpdateOrderStatus.
type UpdateOrderStatusJSONBody struct {
	// Status Current status of the order
	Status OrderStatus `json:"status"`
}

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody CreateOrderJSONBody

// UpdateOrderStatusJSONRequestBody defines body for UpdateOrderStatus for application/json ContentType.
type UpdateOrderStatusJSONRequestBody UpdateOrderStatusJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListOrders request
	ListOrders(ctx context.Context, params *ListOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrderWithBody request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderStatusWithBody request with any body
	UpdateOrderStatusWithBody(ctx context.Context, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrderStatus(ctx context.Context, orderId string, body UpdateOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListOrders(ctx context.Context, params *ListOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrder(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderStatusWithBody(ctx context.Context, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderStatusRequestWithBody(c.Server, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderStatus(ctx context.Context, orderId string, body UpdateOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderStatusRequest(c.Server, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListOrdersRequest generates requests for ListOrders
func NewListOrdersRequest(server string, params *ListOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, orderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrderStatusRequest calls the generic UpdateOrderStatus builder with application/json body
func NewUpdateOrderStatusRequest(server string, orderId string, body UpdateOrderStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrderStatusRequestWithBody(server, orderId, "application/json", bodyReader)
}

// NewUpdateOrderStatusRequestWithBody generates requests for UpdateOrderStatus with any type of body
func NewUpdateOrderStatusRequestWithBody(server string, orderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListOrdersWithResponse request
	ListOrdersWithResponse(ctx context.Context, params *ListOrdersParams, reqEditors ...RequestEditorFn) (*ListOrdersResponse, error)

	// CreateOrderWithBodyWithResponse request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// GetOrderWithResponse request
	GetOrderWithResponse(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*GetOrderResponse, error)

	// UpdateOrderStatusWithBodyWithResponse request with any body
	UpdateOrderStatusWithBodyWithResponse(ctx context.Context, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderStatusResponse, error)

	UpdateOrderStatusWithResponse(ctx context.Context, orderId string, body UpdateOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderStatusResponse, error)
}

type ListOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		NextPageToken *string  `json:"next_page_token,omitempty"`
		Orders        *[]Order `json:"orders,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r GetOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r UpdateOrderStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListOrdersWithResponse request returning *ListOrdersResponse
func (c *ClientWithResponses) ListOrdersWithResponse(ctx context.Context, params *ListOrdersParams, reqEditors ...RequestEditorFn) (*ListOrdersResponse, error) {
	rsp, err := c.ListOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrdersResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// GetOrderWithResponse request returning *GetOrderResponse
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*GetOrderResponse, error) {
	rsp, err := c.GetOrder(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResponse(rsp)
}

// UpdateOrderStatusWithBodyWithResponse request with arbitrary body returning *UpdateOrderStatusResponse
func (c *ClientWithResponses) UpdateOrderStatusWithBodyWithResponse(ctx context.Context, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderStatusResponse, error) {
	rsp, err := c.UpdateOrderStatusWithBody(ctx, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrderStatusWithResponse(ctx context.Context, orderId string, body UpdateOrderStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderStatusResponse, error) {
	rsp, err := c.UpdateOrderStatus(ctx, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderStatusResponse(rsp)
}

// ParseListOrdersResponse parses an HTTP response from a ListOrdersWithResponse call
func ParseListOrdersResponse(rsp *http.Response) (*ListOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			NextPageToken *string  `json:"next_page_token,omitempty"`
			Orders        *[]Order `json:"orders,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderResponse parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResponse(rsp *http.Response) (*GetOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrderStatusResponse parses an HTTP response from a UpdateOrderStatusWithResponse call
func ParseUpdateOrderStatusResponse(rsp *http.Response) (*UpdateOrderStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List orders
	// (GET /v1/orders)
	ListOrders(ctx echo.Context, params ListOrdersParams) error
	// Create a new order
	// (POST /v1/orders)
	CreateOrder(ctx echo.Context) error
	// Get order by ID
	// (GET /v1/orders/{order_id})
	GetOrder(ctx echo.Context, orderId string) error
	// Update order status
	// (PATCH /v1/orders/{order_id})
	UpdateOrderStatus(ctx echo.Context, orderId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListOrders converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrdersParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// GetOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrder(ctx, orderId)
	return err
}

// UpdateOrderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrderStatus(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/orders", wrapper.ListOrders)
	router.POST(baseURL+"/v1/orders", wrapper.CreateOrder)
	router.GET(baseURL+"/v1/orders/:order_id", wrapper.GetOrder)
	router.PATCH(baseURL+"/v1/orders/:order_id", wrapper.UpdateOrderStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWUXPiNhf9Kxp936O7kN3tzI7fKNDUMxlCQ9KXHYYR9gW0tSVFuiKlDP+9I9nYBjmU",
	"brptnxKsq3Olc+65unuaykJJAQINjffUpBsomP/3Xmeg3T9KSwUaOfjPqQaGkC0Yul8ZmFRzhVwKGtNH",
	"XoBBVijysgFBcANEOhTywgypNtKIrqQu3HaaMYTvkBdAI4o7BTSmBjUXa3qIKM/CBE+CP1sgPAOBfMVB",
	"E7lq0nSiIBQmBLrjBt1ev0y4OAGp9/xfw4rG9H+9hqRexVDP05MgFC5LlZZpzXbut0GG9jqIWRnqQCSy",
	"fMEKaUUXt26VlKvnt24IlXaZt9gUtliCduBWZV8nW84Mkmr31dpZA3rRJWAyOp7dhZCXjSQqZylkl1Q8",
	"RFTDs+UaMhp/doXRZDiqdUZfLcG8RpPLL5CiO10jXVDdghUQnnrCCjieW2mZ2RS7bl0t/cnFLwA8WyaQ",
	"4y7c/nO1EoLUgnCBH943qFwgrEvtjV16cl4rKqV5CmQlNcENN94TVxaV4Ljwu0PoqQdVoImLugbvTOYW",
	"m1GpS4ugk9ytG74q96x25Okxh1ZrEEjKcjk3FghbuLPcP4zGD4vZ4+DxabZ4msym42HyYzIe0eh0aTqe",
	"jJLJbfB5kAShs5+S6TREGI3vkl/GD+HCcDAZju/uxqPWHWuDuEYnVjK83mCaeGELJtiaizVJrUFZuMbp",
	"ruh9wzF3YJ4mMgO9dcINpgmN6Ba0KYFu3vXf9R2bUoFgitOYfvCfIqoYbjyzve1Nr4KN93QNvtU4dzF3",
	"miSr+u79MbNimhWAPv7znnKX59mC3h0Fj1s2b0oDtYWoeqlchqBbdEMptoaF4b/7eqk3Z7BiNkca3/RD",
	"61yEQvkrCHrpIHN3aqOkMGVzed/v+xdUCoSyxTOlcp56enpfjCN638I7a03wGy5amcOEEW3Yv/4NC9+v",
	"Q2Ai96n7Aa0yHiL6sbzdWdsTW5bzjDj1wHg7ft8dh6AFy4kBvQVNQGtZtgRji4LpXZ2yzqek6SiwoZ8y",
	"7iv/Vml/kNnuDczXXL59MGg9jJcfufP3bd6pyakpDm+stytKJSyEsm1Uwx0xNk3BmJXN890/UhSl3oQR",
	"AS9V23YBTSvq7f3fBc8Or3alW8BjxXT1JNfgGvMf4f5ST5r/e9JkgIznlUU/hiyXUUIiWUkrsjepcQuV",
	"Q8lyR5KRtynDdBNS/uQnyvbT/G25/zv6wFdM9WeufnUo/U+ZuZqFqqG/w9PfuIrK2qgKyRyZdCF+T1kd",
	"Z8+RTFlOMthCLlXhBzof6wZFndOYbhBV3OvlLm4jDcaf+p/69DA//BEAAP//eZFp5QIPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
